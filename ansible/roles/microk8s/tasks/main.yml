---

- name: update apt cache
  ansible.builtin.apt:
    update_cache: yes

- name: update all packages to their latest version
  ansible.builtin.apt:
    name: "*"
    state: latest

- name: Make sure dependencies are installed
  ansible.builtin.apt:
    name:
      - snapd
      - fuse
      - udev
    state: present

- name: Start and Enable Services
  ansible.builtin.service:
    name: "{{ microk8s_service }}"
    state: started
    enabled: true
  with_items:
    - snapd
    - udev
  loop_control:
    loop_var: microk8s_service
    label: "{{ microk8s_service }}"

- name: install microk8s
  community.general.snap:
    name: microk8s
    channel: "{{ microk8s_channel }}"
    classic: true
    state: present

- name: Create folder for microk8s certificates
  ansible.builtin.file:
    path: /usr/share/ca-certificates/extra
    state: directory
    mode: 0755

- name: Copy certificates
  ansible.builtin.copy:
    src: "{{ microk8s_ca }}"
    dest: /usr/share/ca-certificates/extra
    remote_src: true
    force: true
    mode: 0644
  with_fileglob:
    - "/var/snap/microk8s/current/certs/*ca*.crt"
  loop_control:
    loop_var: microk8s_ca
    label: "{{ microk8s_ca }}"

- name: Trust certificates generated by microk8s
  ansible.builtin.command:
    cmd: update-ca-certificates
  register: microk8s_cmd_result
  changed_when: "'0 added, 0 removed' not in microk8s_cmd_result.stdout"

- name: install kubectl
  community.general.snap:
    name: kubectl
    classic: true
    state: present

# dump microk8s config and put output to given path
- name: grab microk8s kubeconfig file
  ansible.builtin.command:
    cmd: microk8s config
  register: microk8s_kubeconf

- name: make path for kubeconfig file
  file:
    path: "{{ kubeconfig_file_location }}"
    state: directory
    owner: root
    group: root

- name: put to given kubeconfig path
  copy:
    content: "{{ microk8s_kubeconf.stdout }}"
    dest: "{{ kubeconfig_file_location }}/config"

- name: enable plugins
  ansible.builtin.command:
    cmd: "microk8s.enable {{ microk8s_plugin.key }}"
  with_dict: "{{ microk8s_plugins }}"
  loop_control:
    loop_var: microk8s_plugin
    label: "{{ microk8s_plugin.key }}"
  when:
    - microk8s_plugins is defined
    - microk8s_plugin.value
    - microk8s_plugin.key != "registry"
    - microk8s_plugin.key != "dns"
  register: microk8s_cmd_result
  changed_when:
    - "'Addon {{ microk8s_plugin.key }} is already enabled'
      not in microk8s_cmd_result.stdout"

- name: disable plugins
  ansible.builtin.command:
    cmd: "microk8s.disable {{ microk8s_plugin.key }}"
  with_dict: "{{ microk8s_plugins | default({}) }}"
  loop_control:
    loop_var: microk8s_plugin
    label: "{{ microk8s_plugin.key }}"
  register: microk8s_cmd_result
  changed_when:
    - "'Addon {{ microk8s_plugin.key }} is already disabled'
      not in microk8s_cmd_result.stdout"
  when:
    - microk8s_plugins is defined
    - not (microk8s_plugin.value | bool)
    - microk8s_plugin.key != "registry"

- import_tasks: set-docker-mirror.yml
  when: 
    - microk8s_docker_proxy