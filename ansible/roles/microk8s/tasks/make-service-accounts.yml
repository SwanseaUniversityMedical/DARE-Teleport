---

- name: create the cluster-admin role
  kubernetes.core.k8s:
    state: present
    definition: "{{ lookup('file', '{{ role_path }}/files/cluster-admin-role.yml') | from_yaml }}"
    kubeconfig: "{{ kubeconfig_file_location }}/config"

- name: create crb for cluster-admin
  kubernetes.core.k8s:
    state: present
    definition: "{{ lookup('file', '{{ role_path }}/files/cluster-role-binding.yml') | from_yaml }}"
    kubeconfig: "{{ kubeconfig_file_location }}/config"

- name: create a certificate key
  community.crypto.openssl_privatekey:
    path: /tmp/argouser.key.pem
    state: present
  register: private_key

- name: create a signing request
  community.crypto.openssl_csr:
    path: /tmp/argouser.csr
    privatekey_path: "{{ private_key.filename }}"
    common_name: argocduser
    organization_name: externalargo:admins
    state: present
    return_content: true
  register: user_csr

- name: submit the csr file to the cluster
  kubernetes.core.k8s:
    state: present
    template: '{{ role_path }}/templates/signing-request.j2'
    kubeconfig: "{{ kubeconfig_file_location }}/config"

- name: approve the csr
  shell: "kubectl certificate approve argocd-service-user"

- name: save the private key to local
  local_action: copy src="{{ private_key.filename }}" dest={{ cluster_certs_output_dir }}/{{ inventory_hostname }}.key.pem

- name: get the approved certificate
  kubernetes.core.k8s_info:
    api_version: v1
    kind: CertificateSigningRequest
    name: argocd-service-user
    kubeconfig: "{{ kubeconfig_file_location }}/config"
  register: raw_approved_cert

- set_fact:
    approved_cert: "{{ raw_approved_cert.resources[0].status.certificate }}"

- name: save the signed cert to the local 
  local_action: copy content="{{ approved_cert }}" dest={{ cluster_certs_output_dir }}/{{ inventory_hostname }}.pem